'/bootstrap':signature(seq(S1,S2)::state,[S1::state,S2::state]).
'/bootstrap':projection(seq(S1,S2)::state,'/bootstrap':horiz(['/bootstrap':vis(S1::state),'/bootstrap':label(!.),'/bootstrap':vis(S2::state)])).
'/util':behavior(seq(S1,S2)::state,!'should transition with S1', (transition(seq(trans('/impred':now,1,'/bootstrap':number),trans('/impred':localSet(!foo,'/impred':localStr(!bar)),_,'/impred':localStoreVal)),Q,A,'/bootstrap':number,S2),'/util':assertEqual(Q,'/impred':now,'/impred':task('/bootstrap':number)),'/util':assertEqual(A,1,'/bootstrap':number))).
'/util':behavior(seq(S1,S2)::state,!'should transition to S2 if S1 moves to a terminating state', (transition(seq(trans('/impred':now,1,'/bootstrap':number),trans('/impred':localSet(!foo,'/impred':localStr(!bar)),V,'/impred':localStoreVal)),Q,A,'/bootstrap':number,S2),'/util':assertEqual(S2,trans('/impred':localSet(!foo,'/impred':localStr(!bar)),V,'/impred':localStoreVal),state))).
annotation:changeMode((transition(seq(S1,S2),Q,A,T,S2):-transition(S1,Q,A,T,S1Prime),terminates(S1Prime)),sem).
'/util':behavior(seq(S1,S2)::state,!'should transition to S1\'.S2 if S1 moves to a non-terminating state', (transition(seq(annotation:parentheses(seq(trans('/impred':now,1,'/bootstrap':number),trans('/impred':now,2,'/bootstrap':number))),trans('/impred':localSet(!foo,'/impred':localStr(!bar)),V,'/impred':localStoreVal)),Q,A,'/bootstrap':number,S2),'/util':assertEqual(S2,seq(trans('/impred':now,2,'/bootstrap':number),trans('/impred':localSet(!foo,'/impred':localStr(!bar)),V,'/impred':localStoreVal)),state))).
annotation:changeMode((transition(seq(S1,S2),Q,A,T,seq(S1Prime,S2)):-transition(S1,Q,A,T,S1Prime),\+terminates(S1Prime)),sem).
