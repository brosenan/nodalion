'/bootstrap':signature(alt(S1,S2)::state,[S1::state,S2::state]).
'/bootstrap':projection(alt(S1,S2)::state,'/bootstrap':horiz(['/bootstrap':vis(S1::state),'/bootstrap':symbol(8741),'/bootstrap':vis(S2::state)],cpi:middle)).
'/bootstrap':alias(alt(S1,S2)::state,!'||').
'/util':behavior(alt(S1,S2)::state,!'should transition based on S1 when S2 is not empty', (transition(alt(trans('/impred':now,1,'/bootstrap':number),trans('/impred':localGet(!foo),'/impred':localStr(!bar),'/impred':localStoreVal)),'/impred':now,A,'/bootstrap':number,S),'/util':assertEqual(S,alt(empty,trans('/impred':localGet(!foo),'/impred':localStr(!bar),'/impred':localStoreVal)),state),'/util':assertEqual(A,1,'/bootstrap':number))).
annotation:changeMode((transition(alt(S1,S2),Q,A,T,alt(S1Prime,S2)):-transition(S1,Q,A,T,S1Prime),\+terminates(S2)),sem).
'/util':behavior(alt(S1,S2)::state,!'should transition based on S2 when S1 is not empty', (transition(alt(trans('/impred':localGet(!foo),'/impred':localStr(!bar),'/impred':localStoreVal),trans('/impred':now,1,'/bootstrap':number)),'/impred':now,A,'/bootstrap':number,S),'/util':assertEqual(S,alt(trans('/impred':localGet(!foo),'/impred':localStr(!bar),'/impred':localStoreVal),empty),state),'/util':assertEqual(A,1,'/bootstrap':number))).
annotation:changeMode((transition(alt(S1,S2),Q,A,T,alt(S1,S2Prime)):-transition(S2,Q,A,T,S2Prime),\+terminates(S1)),sem).
'/util':behavior(alt(S1,S2)::state,!'should transition to the target of S1 when S2 is empty', (transition(alt(seq(trans('/impred':now,1,'/bootstrap':number),trans('/impred':now,2,'/bootstrap':number)),empty),'/impred':now,A,'/bootstrap':number,S),'/util':assertEqual(S,trans('/impred':now,2,'/bootstrap':number),state),'/util':assertEqual(A,1,'/bootstrap':number))).
annotation:changeMode((transition(alt(S1,S2),Q,A,T,S1Prime):-transition(S1,Q,A,T,S1Prime),terminates(S2)),sem).
'/util':behavior(alt(S1,S2)::state,!'should transition ot the target of S2 when S1 is empty', (transition(alt(empty,seq(trans('/impred':now,1,'/bootstrap':number),trans('/impred':now,2,'/bootstrap':number))),'/impred':now,A,'/bootstrap':number,S),'/util':assertEqual(S,trans('/impred':now,2,'/bootstrap':number),state),'/util':assertEqual(A,1,'/bootstrap':number))).
annotation:changeMode((transition(alt(S1,S2),Q,A,T,S2Prime):-transition(S2,Q,A,T,S2Prime),terminates(S1)),sem).
