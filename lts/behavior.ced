'/bootstrap':signature(behavior(S,Text,Test)::'/bootstrap':statement,[S::state,Text::'/bootstrap':string,Test::'/impred':impred]).
'/bootstrap':projection(behavior(S,Text,Test)::'/bootstrap':statement,'/bootstrap':expand('/bootstrap':raised('/bootstrap':lineBorder('/bootstrap':background('/bootstrap':horiz(['/bootstrap':vis(S::state),'/bootstrap':vis(Text::'/bootstrap':string)]),cpi:rgb(255,192,255)),5,cpi:rgb(255,192,255))),'/bootstrap':raised('/bootstrap':lineBorder('/bootstrap':background('/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':vis(S::state),'/bootstrap':vis(Text::'/bootstrap':string)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':lineBorder('/bootstrap':lowered('/bootstrap':background('/bootstrap':vis(Test::'/impred':impred),cpi:rgb(255,255,255))),5,cpi:rgb(255,192,255))])]),cpi:rgb(255,192,255)),5,cpi:rgb(255,192,255))))).
behavior(S,Text,Test)~>'/util':behavior(S::state,Text,assertSimulate(S,impred(Test))).
'/util':behavior(behavior(State,Text,Test)::'/bootstrap':statement,!'should be checked for failures', ('/bootstrap':check(cpi:path(!'foo.ced',[1]),behavior(trans('/impred':now,2,'/bootstrap':number),!foo,'/impred':task('/impred':uuid,X,'/bootstrap':string))::'/bootstrap':statement,[],'/bootstrap':marker(Path,'/bootstrap':error(Err,[]))),'/util':assertStracturallyEqual(Err,'/bootstrap':exceptionThrown(simulationException(trans('/impred':now,2,'/bootstrap':number),impred('/impred':task('/impred':uuid,X,'/bootstrap':string)),'/impred':uuid,X,'/bootstrap':string)),'/bootstrap':error))).
annotation:shrink(('/bootstrap':check(Path,behavior(State,Text,Test)::'/bootstrap':statement,VNs,'/bootstrap':marker(Path,'/bootstrap':error(Err,VNs))):- \+builtin:var(State::state),'/bootstrap':check(Path,'/util':behavior(State::state,Text,assertSimulate(State,impred(Test)))::'/bootstrap':statement,VNs,'/bootstrap':marker(Path,'/bootstrap':error(Err,VNs))))).
