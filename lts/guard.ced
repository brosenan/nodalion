'/bootstrap':signature(guarded(S1,G)::state,[S1::state,G::'/bootstrap':pred]).
'/bootstrap':projection(guarded(S1,G)::state,'/bootstrap':horiz(['/bootstrap':vis(S1::state),'/bootstrap':brackets('/bootstrap':vis(G::'/bootstrap':pred),123,125)])).
'/bootstrap':alias(guarded(S1,G)::state,!'{}').
'/util':behavior(guarded(S1,G)::state,!'should support transitions from S1 if G holds', (transition(guarded(trans('/impred':now,1,'/bootstrap':number),builtin:true),Now,One,'/bootstrap':number,Empty),'/util':assertEqual(Empty,empty,state),'/util':assertEqual(Now,'/impred':now,'/impred':task('/bootstrap':number)),'/util':assertEqual(One,1,'/bootstrap':number))).
'/util':behavior(guarded(S1,G)::state,!'should not transition if G does not hold',\+transition(guarded(trans('/impred':now,1,'/bootstrap':number),builtin:fail),_,_,'/bootstrap':number,_)).
annotation:changeMode((transition(guarded(S1,G),Q,A,T,S2):-G,transition(S1,Q,A,T,S2)),sem).
