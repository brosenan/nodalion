'/bootstrap':signature(assertSimulate(P,Q)::'/bootstrap':pred,[P::state,Q::state]).
'/bootstrap':projection(assertSimulate(P,Q)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':vis(P::state),'/bootstrap':color('/bootstrap':symbol(8831),cpi:rgb(255,128,0)),'/bootstrap':vis(Q::state)])).
'/bootstrap':alias(assertSimulate(P,Q)::'/bootstrap':pred,!'>~!').
'/util':behavior(assertSimulate(P,Q)::'/bootstrap':pred,!'should succeed when all moves in Q exist in P',assertSimulate(alt(trans('/impred':now,1,'/bootstrap':number),trans('/impred':now,2,'/bootstrap':number)),trans('/impred':now,1,'/bootstrap':number))).
'/bootstrap':defAtom(exceptionWasNotThrown::'/bootstrap':exception).
'/bootstrap':projection(exceptionWasNotThrown::'/bootstrap':exception,'/bootstrap':label(!'exception was not thrown')).
'/bootstrap':signature(simulationException(P,Q,Task,Ans,T)::'/bootstrap':exception,[P::state,Q::state,Task::'/impred':task(T),Ans::T,T::'/bootstrap':type]).
'/bootstrap':projection(simulationException(P,Q,Task,Ans,T)::'/bootstrap':exception,'/bootstrap':horiz(['/bootstrap':label(!transition),'/bootstrap':vis(Task::'/impred':task(T)),'/bootstrap':symbol(8594),'/bootstrap':vis(Ans::T),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type),'/bootstrap':label(!'exists in'),'/bootstrap':vis(Q::state),'/bootstrap':label(!'but not in'),'/bootstrap':vis(P::state)])).
'/util':behavior(assertSimulate(P,Q)::'/bootstrap':pred,!'should throw and exception when a move in Q does not exist in P',builtin:catch((assertSimulate(trans('/impred':now,1,'/bootstrap':number),alt(trans('/impred':now,1,'/bootstrap':number),trans('/impred':uuid,!foo,'/bootstrap':string))),builtin:throw(exceptionWasNotThrown)),simulationException(P,Q,Task,Ans,'/bootstrap':string), ('/util':assertEqual(Task,'/impred':uuid,'/impred':task('/bootstrap':string)),'/util':assertEqual(Ans,!foo,'/bootstrap':string),'/util':assertEqual(Q,alt(empty,trans('/impred':uuid,!foo,'/bootstrap':string)),state),'/util':assertEqual(P,empty,state)))).
'/util':behavior(assertSimulate(P,Q)::'/bootstrap':pred,!'should recurse',builtin:catch((assertSimulate(impred('/impred':conj('/impred':task('/impred':now,1,'/bootstrap':number),'/impred':conj('/impred':task('/impred':now,2,'/bootstrap':number),'/impred':task('/impred':now,3,'/bootstrap':number)))),annotation:shrink(seq(trans('/impred':now,1,'/bootstrap':number),annotation:shrink(seq(trans('/impred':now,2,'/bootstrap':number),trans('/impred':now,4,'/bootstrap':number)))))),builtin:throw(exceptionWasNotThrown)),simulationException(P,Q,Task,Ans,'/bootstrap':number), ('/util':assertEqual(Task,'/impred':now,'/impred':task('/bootstrap':number)),'/util':assertEqual(Ans,4,'/bootstrap':number)))).
assertSimulate(P,Q):-annotation:shrink('/bootstrap':forall(annotation:parentheses(transition(Q,Task,Ans,T,QPrime)),builtin:if(transition(P,Task,Ans,T,PPrime),assertSimulate(PPrime,QPrime),builtin:throw(simulationException(P,Q,Task,Ans,T))))).
'/bootstrap':contextMenuEntry(simulates(P,Q)::'/bootstrap':pred,VNs,Path,!'Convert to assertion',cpi:edit(Path,assertSimulate(P,Q)::'/bootstrap':pred,VNs)).
'/bootstrap':contextMenuEntry(assertSimulate(P,Q)::'/bootstrap':pred,VNs,Path,!'Convert to predicate',cpi:edit(Path,simulates(P,Q)::'/bootstrap':pred,VNs)).
'/bootstrap':signature(appendNeededAction(Pred,Path,VNs)::'/bootstrap':procedure,[Pred::'/bootstrap':pred,Path::cpi:path,VNs::'/bootstrap':list('/bootstrap':varName)]).
cpi:procedureCommand(appendNeededAction(assertSimulate(P,Q),Path,VNs),'/bootstrap':doProc(cpi:edit(Path,assertSimulate(Fixed,Q)::'/bootstrap':pred,VNs))):-builtin:catch((assertSimulate(P,Q),builtin:fail),simulationException(PPrime,_,Task,Ans,T),builtin:if(PPrime::state=empty::state,Fixed::state=seq(P,trans(Task,Ans,T))::state,Fixed::state=seq(trans(Task,Ans,T),P)::state)).
'/bootstrap':contextMenuEntry(assertSimulate(P,Q)::'/bootstrap':pred,VNs,Path,!'Fix model',appendNeededAction(assertSimulate(P,Q),Path,VNs)).
