'/bootstrap':signature(behavior(Concept,Desc,Test)::'/bootstrap':statement,[Concept::'/bootstrap':typedTerm,Desc::'/bootstrap':string,Test::'/bootstrap':pred]).
'/bootstrap':projection(behavior(Concept,Desc,Test)::'/bootstrap':statement,'/bootstrap':expand('/bootstrap':raised('/bootstrap':background('/bootstrap':lineBorder('/bootstrap':horiz(['/bootstrap':vis(Concept::'/bootstrap':typedTerm),'/bootstrap':vis(Desc::'/bootstrap':string)]),10,cpi:rgb(192,224,255)),cpi:rgb(192,224,255))),'/bootstrap':raised('/bootstrap':background('/bootstrap':lineBorder('/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':vis(Concept::'/bootstrap':typedTerm),'/bootstrap':vis(Desc::'/bootstrap':string)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':lowered('/bootstrap':background('/bootstrap':lineBorder('/bootstrap':vis(Test::'/bootstrap':pred),10,cpi:rgb(255,255,255)),cpi:rgb(255,255,255)))])]),10,cpi:rgb(192,224,255)),cpi:rgb(192,224,255))))).
behavior(behavior(Concept,Desc,Test)::'/bootstrap':statement,!'should show if failed',builtin:true).
'/bootstrap':defAtom(none::noneType).
'/bootstrap':defAtom(noneType::'/bootstrap':type).
'/bootstrap':unitTest(Test)~>behavior(none::noneType,!'should pass the test',Test).
annotation:shrink(('/bootstrap':check(Path,behavior(TTerm,ShouldString,Goal)::'/bootstrap':statement,VarNames,'/bootstrap':marker(Path,Marker)):- \+builtin:var(Goal::'/bootstrap':pred),builtin:removeAnnotations(Goal::'/bootstrap':pred,GoalPrime::'/bootstrap':pred),builtin:copyTerm(GoalPrime::'/bootstrap':pred,GoalCopy::'/bootstrap':pred),builtin:catch(builtin:if(builtin:timeout(GoalPrime,0.1),builtin:fail,Marker::'/bootstrap':marker='/bootstrap':error('/bootstrap':failedTest(Goal),VarNames)::'/bootstrap':marker),Exception,Marker::'/bootstrap':marker='/bootstrap':error('/bootstrap':exceptionThrown(Exception),VarNames)::'/bootstrap':marker))).
annotation:shrink(('/bootstrap':testHasFailed('/bootstrap':vert(['/bootstrap':link('/bootstrap':italic('/bootstrap':label(FileName)),FileName),'/bootstrap':horiz(['/bootstrap':vis(cpi:immediateDescriptor(TTerm,VNs)::'/bootstrap':typedTerm),'/bootstrap':label(Desc)]),'/bootstrap':vis(cpi:immediateDescriptor(Error,VNs)::'/bootstrap':error)])):-builtin:loadedStatement(FileName,behavior(TTerm,Desc,Test),VNs),'/bootstrap':check('/bootstrap':noPath,behavior(TTerm,Desc,Test)::'/bootstrap':statement,[],'/bootstrap':marker('/bootstrap':noPath,'/bootstrap':error(Error,[]))))).
'/bootstrap':contextMenuEntry(behavior(Concept,Desc,Test)::'/bootstrap':statement,VNs,Path,!'Show failed tests','/bootstrap':showFailedTests).
annotation:shrink(('/bootstrap':testHasFailed('/bootstrap':horiz(['/bootstrap':label(!'Ran'),'/bootstrap':vis(cpi:immediateDescriptor(N,[])::'/bootstrap':number),'/bootstrap':label(!behaviors)])):-builtin:findall(1,'/bootstrap':number,builtin:loadedStatement(_,behavior(_::_,_,_),_),L),builtin:length(L,'/bootstrap':number,N))).
'/bootstrap':defAtom(spec::'/bootstrap':definitionType).
'/bootstrap':projection(spec::'/bootstrap':definitionType,'/bootstrap':label(!'Specification')).
'/bootstrap':defines(behavior(TTerm,_,_),TTerm,spec).
'/bootstrap':signature(findVariableAssigment(Test,Statement,VNs,Path)::'/bootstrap':procedure,[Test::'/bootstrap':pred,Statement::'/bootstrap':statement,VNs::'/bootstrap':list('/bootstrap':varName),Path::cpi:path]).
cpi:procedureCommand(findVariableAssigment(Test,Statement,VNs,Path),'/bootstrap':doProc(cpi:edit(Path,Statement::'/bootstrap':statement,VNs))):-builtin:if(builtin:timeout(Test,100),builtin:true,builtin:fail).
'/bootstrap':contextMenuEntry(behavior(TTerm,Should,Test)::'/bootstrap':statement,VNs,Path,!'Find Variable Assignment',findVariableAssigment(Test,behavior(TTerm,Should,Test),VNs,Path)).
